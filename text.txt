base

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Admin Panel - {{ site_settings.site_name|default:"Investment Platform" }}{% endblock %}</title>
    
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% load static %}{% static 'css/custom.css' %}">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    {% block extra_head %}{% endblock %}
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Admin Navigation -->
    {% include 'admin_panel/partials/navbar.html' %}
    
    <!-- Admin Sidebar -->
    {% include 'admin_panel/partials/sidebar.html' %}
    
    <!-- Main Content -->
    <main class="ml-0 lg:ml-64">
        <!-- Messages -->
        {% if messages %}
            <div class="fixed top-4 right-4 z-50 space-y-2">
                {% for message in messages %}
                    <div class="alert alert-{{ message.tags }} bg-white border-l-4 p-4 rounded shadow-lg max-w-sm
                        {% if message.tags == 'success' %}border-green-500 text-green-700{% endif %}
                        {% if message.tags == 'error' %}border-red-500 text-red-700{% endif %}
                        {% if message.tags == 'warning' %}border-yellow-500 text-yellow-700{% endif %}
                        {% if message.tags == 'info' %}border-blue-500 text-blue-700{% endif %}">
                        <div class="flex justify-between items-center">
                            <span>{{ message }}</span>
                            <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-gray-400 hover:text-gray-600">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
        
        {% block content %}{% endblock %}
    </main>
    
    <!-- JavaScript -->
    <script src="{% load static %}{% static 'js/main.js' %}"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>



sidebar

<div id="admin-sidebar" class="fixed inset-y-0 left-0 z-30 w-64 bg-gray-900 transform -translate-x-full transition-transform duration-300 ease-in-out lg:translate-x-0">
    <div class="flex items-center justify-center h-16 bg-red-800">
        <div class="flex items-center space-x-2">
            {% if site_settings.site_logo %}
                <img src="{{ site_settings.site_logo.url }}" alt="Logo" class="w-8 h-8">
            {% else %}
                <div class="w-8 h-8 bg-red-500 rounded flex items-center justify-center">
                    <i class="fas fa-shield-alt text-white"></i>
                </div>
            {% endif %}
            <span class="text-white text-lg font-semibold">Admin Panel</span>
        </div>
    </div>
    
    <nav class="mt-8 h-[calc(100vh-4rem)] overflow-y-auto">
        <div class="px-4 space-y-2">
            <!-- Dashboard -->
            <a href="{% url 'admin_panel:dashboard' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'dashboard' %}bg-gray-700 text-white{% endif %}">
                <i class="fas fa-tachometer-alt mr-3"></i>
                Dashboard
            </a>
            
            <!-- User Management -->
            <div class="space-y-1">
                <div class="text-gray-400 text-xs uppercase tracking-wider px-4 py-2">User Management</div>
                
                <a href="{% url 'admin_panel:manage_users' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_users' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-users mr-3"></i>
                    All Users
                    {% if pending_kyc > 0 %}
                        <span class="ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full">{{ pending_kyc }}</span>
                    {% endif %}
                </a>
                
                <a href="{% url 'admin_panel:manage_users' %}?status=pending" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200">
                    <i class="fas fa-user-clock mr-3"></i>
                    Pending KYC
                    {% if pending_kyc > 0 %}
                        <span class="ml-auto bg-yellow-500 text-white text-xs px-2 py-1 rounded-full">{{ pending_kyc }}</span>
                    {% endif %}
                </a>
                
                <a href="{% url 'admin_panel:manage_users' %}?status=verified" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200">
                    <i class="fas fa-user-check mr-3"></i>
                    Verified Users
                </a>
            </div>
            
            <!-- Transaction Management -->
            <div class="space-y-1">
                <div class="text-gray-400 text-xs uppercase tracking-wider px-4 py-2">Transactions</div>
                
                <a href="{% url 'admin_panel:manage_deposits' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_deposits' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-arrow-down mr-3"></i>
                    Deposits
                    {% if pending_deposits > 0 %}
                        <span class="ml-auto bg-blue-500 text-white text-xs px-2 py-1 rounded-full">{{ pending_deposits }}</span>
                    {% endif %}
                </a>
                
                <a href="{% url 'admin_panel:manage_withdrawals' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_withdrawals' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-arrow-up mr-3"></i>
                    Withdrawals
                    {% if pending_withdrawals > 0 %}
                        <span class="ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full">{{ pending_withdrawals }}</span>
                    {% endif %}
                </a>
                
                <a href="{% url 'admin_panel:manage_investments' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_investments' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-chart-pie mr-3"></i>
                    All Investments
                </a>
            </div>
            
            <!-- Platform Management -->
            <div class="space-y-1">
                <div class="text-gray-400 text-xs uppercase tracking-wider px-4 py-2">Platform</div>
                
                <a href="{% url 'admin_panel:manage_investment_plans' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_investment_plans' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-layer-group mr-3"></i>
                    Investment Plans
                </a>
                
                <a href="{% url 'admin_panel:manage_testimonials' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_testimonials' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-comment-alt mr-3"></i>
                    Testimonials
                </a>

                <a href="{% url 'admin_panel:manage_certifications' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'manage_certifications' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-certificate mr-3"></i>
                    Certifications
                </a>
                
                <a href="{% url 'admin_panel:settings' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'settings' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-cog mr-3"></i>
                    Platform Settings
                </a>
                
                <a href="{% url 'admin_panel:reports' %}" class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-lg transition-colors duration-200 {% if request.resolver_match.url_name == 'reports' %}bg-gray-700 text-white{% endif %}">
                    <i class="fas fa-chart-bar mr-3"></i>
                    Reports & Analytics
                </a>
            </div>
        </div>
        
        <!-- Platform Stats Card -->
        <div class="mx-4 mt-8 p-4 bg-gray-800 rounded-lg">
            <div class="text-gray-400 text-xs uppercase tracking-wider mb-2">Platform Overview</div>
            <div class="space-y-2 text-sm">
                <div class="flex justify-between text-gray-300">
                    <span>Total Users:</span>
                    <span class="font-semibold">{{ total_users|default:0 }}</span>
                </div>
                <div class="flex justify-between text-gray-300">
                    <span>Total Deposits:</span>
                    <span class="font-semibold text-green-400">${{ total_deposits|floatformat:0|default:0 }}</span>
                </div>
                <div class="flex justify-between text-gray-300">
                    <span>Active Investments:</span>
                    <span class="font-semibold text-blue-400">${{ active_investments|floatformat:0|default:0 }}</span>
                </div>
            </div>
        </div>
        
        <!-- Quick Actions -->
        <div class="mx-4 mt-4 mb-4 space-y-2">
            <div class="text-gray-400 text-xs uppercase tracking-wider mb-2">Quick Actions</div>
            <button onclick="window.location.href='{% url 'admin_panel:manage_users' %}?status=pending'" class="w-full flex items-center justify-center px-3 py-2 bg-yellow-600 hover:bg-yellow-700 text-white text-sm rounded-lg transition-colors">
                <i class="fas fa-user-check mr-2"></i>
                Review KYC
            </button>
            <button onclick="window.location.href='{% url 'admin_panel:manage_withdrawals' %}?status=pending'" class="w-full flex items-center justify-center px-3 py-2 bg-red-600 hover:bg-red-700 text-white text-sm rounded-lg transition-colors">
                <i class="fas fa-money-bill-wave mr-2"></i>
                Process Withdrawals
            </button>
        </div>
    </nav>
</div>

<!-- Sidebar overlay for mobile -->
<div id="admin-sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-20 hidden lg:hidden"></div>

<script>
// Admin sidebar mobile toggle
document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuBtn = document.getElementById('admin-mobile-menu-btn');
    const sidebar = document.getElementById('admin-sidebar');
    const overlay = document.getElementById('admin-sidebar-overlay');
    const userMenuBtn = document.getElementById('admin-user-menu-btn');
    const userMenu = document.getElementById('admin-user-menu');

    // Mobile menu toggle
    if (mobileMenuBtn) {
        mobileMenuBtn.addEventListener('click', function() {
            sidebar.classList.toggle('-translate-x-full');
            overlay.classList.toggle('hidden');
        });
    }

    // Close sidebar when clicking overlay
    if (overlay) {
        overlay.addEventListener('click', function() {
            sidebar.classList.add('-translate-x-full');
            overlay.classList.add('hidden');
        });
    }

    // User menu toggle
    if (userMenuBtn && userMenu) {
        userMenuBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            userMenu.classList.toggle('hidden');
        });

        // Close user menu when clicking outside
        document.addEventListener('click', function() {
            userMenu.classList.add('hidden');
        });
    }
});
</script>




navbar

<nav class="bg-white shadow-lg fixed top-0 left-0 right-0 z-40 lg:left-64">
    <div class="px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex items-center">
                <!-- Mobile menu button -->
                <button id="admin-mobile-menu-btn" class="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100">
                    <i class="fas fa-bars"></i>
                </button>
                
                <h1 class="ml-4 text-xl font-semibold text-gray-900">
                    <i class="fas fa-shield-alt text-red-600 mr-2"></i>
                    {% block page_title %}Admin Dashboard{% endblock %}
                </h1>
            </div>
            
            <div class="flex items-center space-x-4">
                <!-- Quick Stats -->
                <div class="hidden md:flex items-center space-x-4 text-sm text-gray-600">
                    <div class="flex items-center space-x-1">
                        <i class="fas fa-users text-blue-500"></i>
                        <span>{{ total_users|default:0 }} Users</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <i class="fas fa-clock text-yellow-500"></i>
                        <span>{{ pending_kyc|default:0 }} Pending KYC</span>
                    </div>
                    <div class="flex items-center space-x-1">
                        <i class="fas fa-exclamation-triangle text-red-500"></i>
                        <span>{{ pending_withdrawals|default:0 }} Withdrawals</span>
                    </div>
                </div>
                
                <!-- Admin menu -->
                <div class="relative">
                    <button id="admin-user-menu-btn" class="flex items-center space-x-2 text-gray-700 hover:text-gray-900">
                        <div class="w-8 h-8 bg-red-500 rounded-full flex items-center justify-center text-white text-sm font-medium">
                            <i class="fas fa-user-shield"></i>
                        </div>
                        <span class="hidden sm:block">{{ user.username }}</span>
                        <span class="hidden sm:block text-xs text-red-600 font-medium">ADMIN</span>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                    
                    <!-- Dropdown menu -->
                    <div id="admin-user-menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50">
                        <a href="{% url 'admin_panel:settings' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            <i class="fas fa-cog mr-2"></i>Platform Settings
                        </a>
                        <a href="{% url 'admin_panel:admin_profile' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            <i class="fas fa-user mr-2"></i>Profile
                        </a>
                        <a href="{% url 'admin_panel:reports' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            <i class="fas fa-chart-bar mr-2"></i>Reports
                        </a>
                        <div class="border-t border-gray-100"></div>
                        <a href="{% url 'accounts:logout' %}" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            <i class="fas fa-sign-out-alt mr-2"></i>Logout
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</nav>



main.js

// Mobile menu toggle
document.addEventListener("DOMContentLoaded", () => {
  const mobileMenuBtn = document.getElementById("mobile-menu-btn")
  const sidebar = document.getElementById("sidebar")
  const sidebarOverlay = document.getElementById("sidebar-overlay")
  const userMenuBtn = document.getElementById("user-menu-btn")
  const userMenu = document.getElementById("user-menu")

  // Mobile sidebar toggle
  if (mobileMenuBtn && sidebar && sidebarOverlay) {
    mobileMenuBtn.addEventListener("click", () => {
      sidebar.classList.toggle("-translate-x-full")
      sidebarOverlay.classList.toggle("hidden")
    })

    sidebarOverlay.addEventListener("click", () => {
      sidebar.classList.add("-translate-x-full")
      sidebarOverlay.classList.add("hidden")
    })
  }

  // User menu dropdown
  if (userMenuBtn && userMenu) {
    userMenuBtn.addEventListener("click", (e) => {
      e.stopPropagation()
      userMenu.classList.toggle("hidden")
    })

    // Close dropdown when clicking outside
    document.addEventListener("click", () => {
      userMenu.classList.add("hidden")
    })

    userMenu.addEventListener("click", (e) => {
      e.stopPropagation()
    })
  }

  // Auto-hide messages after 5 seconds
  const messages = document.querySelectorAll(".alert")
  messages.forEach((message) => {
    setTimeout(() => {
      message.style.opacity = "0"
      setTimeout(() => {
        message.remove()
      }, 300)
    }, 5000)
  })
})

// Form validation helpers
function validateForm(formId) {
  const form = document.getElementById(formId)
  if (!form) return true

  const requiredFields = form.querySelectorAll("[required]")
  let isValid = true

  requiredFields.forEach((field) => {
    if (!field.value.trim()) {
      field.classList.add("border-red-500")
      isValid = false
    } else {
      field.classList.remove("border-red-500")
    }
  })

  return isValid
}

// Number formatting
function formatCurrency(amount) {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount)
}

// Copy to clipboard function
function copyToClipboard(text) {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(text).then(() => {
      showNotification("Copied to clipboard!", "success")
    })
  } else {
    // Fallback for older browsers
    const textArea = document.createElement("textarea")
    textArea.value = text
    document.body.appendChild(textArea)
    textArea.select()
    document.execCommand("copy")
    document.body.removeChild(textArea)
    showNotification("Copied to clipboard!", "success")
  }
}

// Show notification
function showNotification(message, type = "info") {
  const notification = document.createElement("div")
  notification.className = `fixed top-4 right-4 z-50 p-4 rounded shadow-lg max-w-sm ${
    type === "success"
      ? "bg-green-500 text-white"
      : type === "error"
        ? "bg-red-500 text-white"
        : type === "warning"
          ? "bg-yellow-500 text-white"
          : "bg-blue-500 text-white"
  }`
  notification.innerHTML = `
        <div class="flex justify-between items-center">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `

  document.body.appendChild(notification)

  setTimeout(() => {
    notification.remove()
  }, 5000)
}





admin_panel/investments

{% extends 'admin_panel/base.html' %}

{% block title %}Investment Management - Admin Panel{% endblock %}
{% block page_title %}Investment Management{% endblock %}

{% block content %}
<div class="p-6 mt-16">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Investment Management</h1>
            <p class="text-gray-600 mt-1">Monitor and manage all user investments</p>
        </div>
        <div class="flex space-x-3">
            <button onclick="toggleFilters()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors">
                <i class="fas fa-filter mr-2"></i>Filters
            </button>
            <button onclick="openAddInvestmentModal()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors">
                <i class="fas fa-plus mr-2"></i>Add Investment
            </button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-blue-500">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600 uppercase tracking-wide">Total Investments</p>
                    <p class="text-2xl font-bold text-gray-900 mt-2">${{ total_investment_amount|floatformat:2 }}</p>
                </div>
                <div class="p-3 bg-blue-100 rounded-full">
                    <i class="fas fa-chart-line text-2xl text-blue-600"></i>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-green-500">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600 uppercase tracking-wide">Active Investments</p>
                    <p class="text-2xl font-bold text-gray-900 mt-2">{{ active_investments_count }}</p>
                </div>
                <div class="p-3 bg-green-100 rounded-full">
                    <i class="fas fa-play-circle text-2xl text-green-600"></i>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-purple-500">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600 uppercase tracking-wide">Completed</p>
                    <p class="text-2xl font-bold text-gray-900 mt-2">{{ completed_investments_count }}</p>
                </div>
                <div class="p-3 bg-purple-100 rounded-full">
                    <i class="fas fa-check-circle text-2xl text-purple-600"></i>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-md p-6 border-l-4 border-orange-500">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600 uppercase tracking-wide">Expected Returns</p>
                    <p class="text-2xl font-bold text-gray-900 mt-2">${{ total_expected_returns|floatformat:2 }}</p>
                </div>
                <div class="p-3 bg-orange-100 rounded-full">
                    <i class="fas fa-dollar-sign text-2xl text-orange-600"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div id="filtersSection" class="bg-white rounded-lg shadow-md p-6 mb-6 hidden">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Filter Investments</h3>
        <form method="GET" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select name="status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">All Status</option>
                    <option value="active" {% if request.GET.status == 'active' %}selected{% endif %}>Active</option>
                    <option value="completed" {% if request.GET.status == 'completed' %}selected{% endif %}>Completed</option>
                    <option value="cancelled" {% if request.GET.status == 'cancelled' %}selected{% endif %}>Cancelled</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Investment Plan</label>
                <select name="plan" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">All Plans</option>
                    {% for plan in investment_plans %}
                        <option value="{{ plan.id }}" {% if request.GET.plan == plan.id|stringformat:"s" %}selected{% endif %}>
                            {{ plan.name }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Search User</label>
                <input type="text" name="search" placeholder="Username or email" 
                       value="{{ request.GET.search }}" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <div class="flex items-end space-x-2">
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors">
                    <i class="fas fa-search mr-2"></i>Filter
                </button>
                <a href="{% url 'admin_panel:manage_investments' %}" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors">
                    <i class="fas fa-times mr-2"></i>Clear
                </a>
            </div>
        </form>
    </div>

    <!-- Investments Table -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-lg font-semibold text-gray-900">
                All Investments 
                <span class="text-sm font-normal text-gray-500">({{ investments.paginator.count }} total)</span>
            </h3>
            <div class="flex space-x-2">
                <a href="?export=csv{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                   class="bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded-lg text-sm transition-colors">
                    <i class="fas fa-file-csv mr-1"></i>CSV
                </a>
                <a href="?export=excel{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                   class="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg text-sm transition-colors">
                    <i class="fas fa-file-excel mr-1"></i>Excel
                </a>
            </div>
        </div>

        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Plan</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expected Return</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    {% for investment in investments %}
                    <tr class="hover:bg-gray-50 transition-colors">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            #{{ investment.id }}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-medium text-sm mr-3">
                                    {{ investment.user.username|first|upper }}
                                </div>
                                <div>
                                    <div class="text-sm font-medium text-gray-900">
                                        {{ investment.user.full_name|default:investment.user.username }}
                                    </div>
                                    <div class="text-sm text-gray-500">{{ investment.user.email }}</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">{{ investment.plan.name }}</div>
                            <div class="text-sm text-gray-500">{{ investment.plan.roi_percentage }}% ROI</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-bold text-green-600">
                            ${{ investment.amount|floatformat:2 }}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-bold text-blue-600">
                            ${{ investment.expected_return|floatformat:2 }}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="w-full bg-gray-200 rounded-full h-2 mb-1">
                                <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                                     style="width: {{ investment.progress_percentage }}%"></div>
                            </div>
                            <div class="text-xs text-gray-500">
                                {{ investment.days_passed }}/{{ investment.plan.duration_days }} days
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            {% if investment.status == 'active' %}
                                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                                    Active
                                </span>
                            {% elif investment.status == 'completed' %}
                                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                                    Completed
                                </span>
                            {% elif investment.status == 'cancelled' %}
                                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                                    Cancelled
                                </span>
                            {% endif %}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {{ investment.start_date|date:"M d, Y" }}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div class="flex space-x-2">
                                <button onclick="viewInvestmentDetail({{ investment.id }})" 
                                        class="text-blue-600 hover:text-blue-900 transition-colors" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button onclick="editInvestment({{ investment.id }})" 
                                        class="text-green-600 hover:text-green-900 transition-colors" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                {% if investment.status == 'active' %}
                                    <button onclick="completeInvestment({{ investment.id }})" 
                                            class="text-purple-600 hover:text-purple-900 transition-colors" title="Mark Complete">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button onclick="cancelInvestment({{ investment.id }})" 
                                            class="text-red-600 hover:text-red-900 transition-colors" title="Cancel">
                                        <i class="fas fa-times"></i>
                                    </button>
                                {% endif %}
                            </div>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="9" class="px-6 py-12 text-center">
                            <div class="text-gray-500">
                                <i class="fas fa-chart-line text-4xl mb-4 text-gray-300"></i>
                                <p class="text-lg font-medium">No investments found</p>
                                <p class="text-sm">Try adjusting your filters or add a new investment</p>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        {% if investments.has_other_pages %}
        <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
            <div class="flex items-center justify-between">
                <div class="flex-1 flex justify-between sm:hidden">
                    {% if investments.has_previous %}
                        <a href="?page={{ investments.previous_page_number }}{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                           class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Previous
                        </a>
                    {% endif %}
                    {% if investments.has_next %}
                        <a href="?page={{ investments.next_page_number }}{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                           class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Next
                        </a>
                    {% endif %}
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-sm text-gray-700">
                            Showing <span class="font-medium">{{ investments.start_index }}</span> to 
                            <span class="font-medium">{{ investments.end_index }}</span> of 
                            <span class="font-medium">{{ investments.paginator.count }}</span> results
                        </p>
                    </div>
                    <div>
                        <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                            {% if investments.has_previous %}
                                <a href="?page={{ investments.previous_page_number }}{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                                   class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            {% endif %}
                            
                            {% for num in investments.paginator.page_range %}
                                {% if investments.number == num %}
                                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-blue-50 text-sm font-medium text-blue-600">
                                        {{ num }}
                                    </span>
                                {% elif num > investments.number|add:'-3' and num < investments.number|add:'3' %}
                                    <a href="?page={{ num }}{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                                       class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                        {{ num }}
                                    </a>
                                {% endif %}
                            {% endfor %}
                            
                            {% if investments.has_next %}
                                <a href="?page={{ investments.next_page_number }}{% if request.GET.status %}&status={{ request.GET.status }}{% endif %}{% if request.GET.plan %}&plan={{ request.GET.plan }}{% endif %}{% if request.GET.search %}&search={{ request.GET.search }}{% endif %}" 
                                   class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            {% endif %}
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        {% endif %}
    </div>
</div>

<!-- Add Investment Modal -->
<div id="addInvestmentModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex justify-center items-center h-full p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Add New Investment</h3>
            </div>
            <form method="POST" action="{% url 'admin_panel:add_investment' %}">
                <div class="px-6 py-4 space-y-4">
                    {% csrf_token %}
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">User</label>
                        <select name="user" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">Select User</option>
                            {% for user in users %}
                                <option value="{{ user.id }}">{{ user.full_name|default:user.username }} ({{ user.email }})</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Investment Plan</label>
                        <select name="plan" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" onchange="updateAmountLimits(this)">
                            <option value="">Select Plan</option>
                            {% for plan in investment_plans %}
                                <option value="{{ plan.id }}" data-min="{{ plan.minimum_amount }}" data-max="{{ plan.maximum_amount }}" data-roi="{{ plan.roi_percentage }}">
                                    {{ plan.name }} ({{ plan.roi_percentage }}% ROI - {{ plan.duration_days }} days)
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Investment Amount</label>
                        <input type="number" name="amount" step="0.01" min="0" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <p class="text-sm text-gray-500 mt-1" id="amountLimits">Select a plan to see amount limits</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                        <input type="date" name="start_date" value="{% now 'Y-m-d' %}" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" onclick="closeAddInvestmentModal()" 
                            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
                        Add Investment
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Investment Detail Modal -->
<div id="investmentDetailModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex justify-center items-center h-full p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-semibold text-gray-900">Investment Details</h3>
                <button onclick="closeModal('investmentDetailModal')" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="investmentDetailContent" class="px-6 py-4">
                <!-- Content loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Edit Investment Modal -->
<div id="editInvestmentModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex justify-center items-center h-full p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-semibold text-gray-900">Edit Investment</h3>
                <button onclick="closeModal('editInvestmentModal')" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="editInvestmentContent">
                <!-- Content loaded via AJAX -->
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Get CSRF token
function getCSRFToken() {
    return document.querySelector('[name=csrfmiddlewaretoken]')?.value || 
           document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
}

// Toggle filters section
function toggleFilters() {
    const filtersSection = document.getElementById('filtersSection');
    filtersSection.classList.toggle('hidden');
}

// Modal functions
function openAddInvestmentModal() {
    document.getElementById('addInvestmentModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
}

function closeAddInvestmentModal() {
    document.getElementById('addInvestmentModal').classList.add('hidden');
    document.body.style.overflow = 'auto'; // Restore scrolling
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.add('hidden');
    document.body.style.overflow = 'auto'; // Restore scrolling
}

// Update amount limits based on selected plan
function updateAmountLimits(selectElement) {
    const selectedOption = selectElement.options[selectElement.selectedIndex];
    const minAmount = selectedOption.getAttribute('data-min');
    const maxAmount = selectedOption.getAttribute('data-max');
    const roi = selectedOption.getAttribute('data-roi');
    
    const amountInput = document.querySelector('input[name="amount"]');
    const limitsText = document.getElementById('amountLimits');
    
    if (minAmount && maxAmount) {
        amountInput.setAttribute('min', minAmount);
        amountInput.setAttribute('max', maxAmount);
        limitsText.textContent = `Amount must be between $${minAmount} and $${maxAmount}`;
        limitsText.className = 'text-sm text-blue-600 mt-1';
    } else {
        limitsText.textContent = 'Select a plan to see amount limits';
        limitsText.className = 'text-sm text-gray-500 mt-1';
    }
}

// Show loading state
function showLoading(button) {
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Loading...';
    button.disabled = true;
    return originalText;
}

// Hide loading state
function hideLoading(button, originalText) {
    button.innerHTML = originalText;
    button.disabled = false;
}

// Investment actions
function viewInvestmentDetail(investmentId) {
    const modal = document.getElementById('investmentDetailModal');
    const content = document.getElementById('investmentDetailContent');
    
    // Show loading
    content.innerHTML = '<div class="flex justify-center items-center py-8"><i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i></div>';
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    fetch(`/admin-panel/investments/${investmentId}/detail/`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            content.innerHTML = html;
        })
        .catch(error => {
            console.error('Error:', error);
            content.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-exclamation-triangle text-3xl text-red-400 mb-4"></i>
                    <p class="text-red-600">Error loading investment details</p>
                    <button onclick="closeModal('investmentDetailModal')" class="mt-4 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Close</button>
                </div>
            `;
        });
}

function editInvestment(investmentId) {
    const modal = document.getElementById('editInvestmentModal');
    const content = document.getElementById('editInvestmentContent');
    
    // Show loading
    content.innerHTML = '<div class="flex justify-center items-center py-8"><i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i></div>';
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    fetch(`/admin-panel/investments/${investmentId}/edit-form/`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            content.innerHTML = html;
        })
        .catch(error => {
            console.error('Error:', error);
            content.innerHTML = `
                <div class="text-center py-8">
                    <i class="fas fa-exclamation-triangle text-3xl text-red-400 mb-4"></i>
                    <p class="text-red-600">Error loading edit form</p>
                    <button onclick="closeModal('editInvestmentModal')" class="mt-4 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Close</button>
                </div>
            `;
        });
}

function completeInvestment(investmentId) {
    if (confirm('Are you sure you want to mark this investment as completed? This will add the returns to the user\'s account.')) {
        // Find the button that was clicked and show loading
        const button = event.target.closest('button');
        const originalText = showLoading(button);
        
        const formData = new FormData();
        formData.append('csrfmiddlewaretoken', getCSRFToken());
        
        fetch(`/admin-panel/investments/${investmentId}/complete/`, {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            hideLoading(button, originalText);
            if (data.success) {
                // Show success message
                showMessage('Investment completed successfully!', 'success');
                // Reload page after short delay
                setTimeout(() => location.reload(), 1000);
            } else {
                showMessage('Error: ' + (data.error || 'Unknown error occurred'), 'error');
            }
        })
        .catch(error => {
            hideLoading(button, originalText);
            console.error('Error:', error);
            showMessage('Error completing investment. Please try again.', 'error');
        });
    }
}

function cancelInvestment(investmentId) {
    if (confirm('Are you sure you want to cancel this investment? This will refund the amount to the user\'s account.')) {
        // Find the button that was clicked and show loading
        const button = event.target.closest('button');
        const originalText = showLoading(button);
        
        const formData = new FormData();
        formData.append('csrfmiddlewaretoken', getCSRFToken());
        
        fetch(`/admin-panel/investments/${investmentId}/cancel/`, {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            hideLoading(button, originalText);
            if (data.success) {
                // Show success message
                showMessage('Investment cancelled successfully!', 'success');
                // Reload page after short delay
                setTimeout(() => location.reload(), 1000);
            } else {
                showMessage('Error: ' + (data.error || 'Unknown error occurred'), 'error');
            }
        })
        .catch(error => {
            hideLoading(button, originalText);
            console.error('Error:', error);
            showMessage('Error cancelling investment. Please try again.', 'error');
        });
    }
}

// Show message function
function showMessage(message, type = 'info') {
    const messageContainer = document.createElement('div');
    messageContainer.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transition-all duration-300 transform translate-x-full`;
    
    let bgColor, textColor, icon;
    switch(type) {
        case 'success':
            bgColor = 'bg-green-100 border-green-500';
            textColor = 'text-green-700';
            icon = 'fas fa-check-circle';
            break;
        case 'error':
            bgColor = 'bg-red-100 border-red-500';
            textColor = 'text-red-700';
            icon = 'fas fa-exclamation-circle';
            break;
        case 'warning':
            bgColor = 'bg-yellow-100 border-yellow-500';
            textColor = 'text-yellow-700';
            icon = 'fas fa-exclamation-triangle';
            break;
        default:
            bgColor = 'bg-blue-100 border-blue-500';
            textColor = 'text-blue-700';
            icon = 'fas fa-info-circle';
    }
    
    messageContainer.className += ` ${bgColor} ${textColor} border-l-4`;
    messageContainer.innerHTML = `
        <div class="flex justify-between items-center">
            <div class="flex items-center">
                <i class="${icon} mr-2"></i>
                <span>${message}</span>
            </div>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    document.body.appendChild(messageContainer);
    
    // Animate in
    setTimeout(() => {
        messageContainer.classList.remove('translate-x-full');
    }, 100);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        messageContainer.classList.add('translate-x-full');
        setTimeout(() => messageContainer.remove(), 300);
    }, 5000);
}

// Close modals when clicking outside
document.addEventListener('click', function(event) {
    const modals = ['addInvestmentModal', 'investmentDetailModal', 'editInvestmentModal'];
    modals.forEach(modalId => {
        const modal = document.getElementById(modalId);
        if (event.target === modal) {
            modal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
    });
});

// Handle form submission for add investment
document.addEventListener('DOMContentLoaded', function() {
    const addInvestmentForm = document.querySelector('#addInvestmentModal form');
    if (addInvestmentForm) {
        addInvestmentForm.addEventListener('submit', function(e) {
            const submitButton = this.querySelector('button[type="submit"]');
            const originalText = showLoading(submitButton);
            
            // Let the form submit naturally, but show loading state
            setTimeout(() => {
                if (submitButton) {
                    hideLoading(submitButton, originalText);
                }
            }, 2000);
        });
    }
    
    // Auto-hide existing messages
    const existingAlerts = document.querySelectorAll('.alert');
    existingAlerts.forEach(alert => {
        setTimeout(() => {
            alert.style.opacity = '0';
            setTimeout(() => alert.remove(), 300);
        }, 5000);
    });
});

// Keyboard shortcuts
document.addEventListener('keydown', function(event) {
    // Escape key to close modals
    if (event.key === 'Escape') {
        const modals = ['addInvestmentModal', 'investmentDetailModal', 'editInvestmentModal'];
        modals.forEach(modalId => {
            const modal = document.getElementById(modalId);
            if (!modal.classList.contains('hidden')) {
                modal.classList.add('hidden');
                document.body.style.overflow = 'auto';
            }
        });
    }
});
</script>
{% endblock %}


edit_investment

<form method="POST" action="{% url 'admin_panel:edit_investment' investment.id %}">
    <div class="px-6 py-4 space-y-4">
        {% csrf_token %}
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Investment Plan</label>
            <select name="plan" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                {% for plan in investment_plans %}
                    <option value="{{ plan.id }}" {% if plan.id == investment.plan.id %}selected{% endif %}>
                        {{ plan.name }} ({{ plan.roi_percentage }}% ROI - {{ plan.duration_days }} days)
                    </option>
                {% endfor %}
            </select>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Investment Amount</label>
            <input type="number" name="amount" step="0.01" min="0" required 
                   value="{{ investment.amount }}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Expected Return</label>
            <input type="number" name="expected_return" step="0.01" min="0" required 
                   value="{{ investment.expected_return }}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select name="status" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="active" {% if investment.status == 'active' %}selected{% endif %}>Active</option>
                <option value="completed" {% if investment.status == 'completed' %}selected{% endif %}>Completed</option>
                <option value="cancelled" {% if investment.status == 'cancelled' %}selected{% endif %}>Cancelled</option>
            </select>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
            <input type="datetime-local" name="start_date" required 
                   value="{{ investment.start_date|date:'Y-m-d\TH:i' }}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
            <input type="datetime-local" name="end_date" required 
                   value="{{ investment.end_date|date:'Y-m-d\TH:i' }}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>
        
        {% if investment.status == 'completed' %}
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Completed At</label>
            <input type="datetime-local" name="completed_at" 
                   value="{% if investment.completed_at %}{{ investment.completed_at|date:'Y-m-d\TH:i' }}{% endif %}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        </div>
        {% endif %}
    </div>
    
    <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
        <button type="button" onclick="closeModal('editInvestmentModal')" 
                class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
            Cancel
        </button>
        <button type="submit" 
                class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
            Update Investment
        </button>
    </div>
</form>

<script>
// Handle form submission
document.querySelector('#editInvestmentModal form').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const submitButton = this.querySelector('button[type="submit"]');
    const originalText = submitButton.innerHTML;
    
    // Show loading
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Updating...';
    submitButton.disabled = true;
    
    fetch(this.action, {
        method: 'POST',
        body: formData,
    })
    .then(response => {
        if (response.ok) {
            closeModal('editInvestmentModal');
            showMessage('Investment updated successfully!', 'success');
            setTimeout(() => location.reload(), 1000);
        } else {
            throw new Error('Failed to update investment');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showMessage('Error updating investment. Please try again.', 'error');
    })
    .finally(() => {
        // Restore button
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
    });
});
</script>


investment_detail

<div class="space-y-6">
    <!-- Investment Overview -->
    <div class="bg-gray-50 rounded-lg p-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-4">Investment Overview</h4>
        <div class="grid grid-cols-2 gap-4">
            <div>
                <span class="text-sm text-gray-600">Investment ID:</span>
                <p class="font-semibold">#{{ investment.id }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Status:</span>
                <p>
                    {% if investment.status == 'active' %}
                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Active</span>
                    {% elif investment.status == 'completed' %}
                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">Completed</span>
                    {% elif investment.status == 'cancelled' %}
                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">Cancelled</span>
                    {% endif %}
                </p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Investment Amount:</span>
                <p class="font-semibold text-green-600">${{ investment.amount|floatformat:2 }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Expected Return:</span>
                <p class="font-semibold text-blue-600">${{ investment.expected_return|floatformat:2 }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Profit:</span>
                <p class="font-semibold text-purple-600">${{ investment.profit|floatformat:2 }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">ROI:</span>
                <p class="font-semibold">{{ investment.plan.roi_percentage }}%</p>
            </div>
        </div>
    </div>

    <!-- User Information -->
    <div class="bg-gray-50 rounded-lg p-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-4">Investor Information</h4>
        <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white font-medium">
                {{ investment.user.username|first|upper }}
            </div>
            <div>
                <p class="font-semibold">{{ investment.user.full_name|default:investment.user.username }}</p>
                <p class="text-sm text-gray-600">{{ investment.user.email }}</p>
                <p class="text-sm text-gray-600">Joined: {{ investment.user.date_joined|date:"M d, Y" }}</p>
            </div>
        </div>
    </div>

    <!-- Investment Plan Details -->
    <div class="bg-gray-50 rounded-lg p-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-4">Plan Details</h4>
        <div class="grid grid-cols-2 gap-4">
            <div>
                <span class="text-sm text-gray-600">Plan Name:</span>
                <p class="font-semibold">{{ investment.plan.name }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Duration:</span>
                <p class="font-semibold">{{ investment.plan.duration_days }} days</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">ROI Percentage:</span>
                <p class="font-semibold">{{ investment.plan.roi_percentage }}%</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Plan Range:</span>
                <p class="font-semibold">${{ investment.plan.minimum_amount }} - ${{ investment.plan.maximum_amount }}</p>
            </div>
        </div>
    </div>

    <!-- Timeline -->
    <div class="bg-gray-50 rounded-lg p-4">
        <h4 class="text-lg font-semibold text-gray-900 mb-4">Timeline</h4>
        <div class="grid grid-cols-2 gap-4">
            <div>
                <span class="text-sm text-gray-600">Start Date:</span>
                <p class="font-semibold">{{ investment.start_date|date:"M d, Y H:i" }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">End Date:</span>
                <p class="font-semibold">{{ investment.end_date|date:"M d, Y H:i" }}</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Days Passed:</span>
                <p class="font-semibold">{{ investment.days_passed }} days</p>
            </div>
            <div>
                <span class="text-sm text-gray-600">Days Remaining:</span>
                <p class="font-semibold">{{ investment.days_remaining }} days</p>
            </div>
        </div>
        
        <!-- Progress Bar -->
        <div class="mt-4">
            <div class="flex justify-between text-sm text-gray-600 mb-1">
                <span>Progress</span>
                <span>{{ investment.progress_percentage|floatformat:1 }}%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-3">
                <div class="bg-blue-600 h-3 rounded-full transition-all duration-300" 
                     style="width: {{ investment.progress_percentage }}%"></div>
            </div>
        </div>
    </div>

    {% if investment.completed_at %}
    <div class="bg-green-50 rounded-lg p-4">
        <h4 class="text-lg font-semibold text-green-900 mb-2">Completion Details</h4>
        <p class="text-sm text-green-700">
            <i class="fas fa-check-circle mr-2"></i>
            Completed on {{ investment.completed_at|date:"M d, Y H:i" }}
        </p>
    </div>
    {% endif %}

    <!-- Action Buttons -->
    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
        {% if investment.status == 'active' %}
            <button onclick="completeInvestment({{ investment.id }}); closeModal('investmentDetailModal');" 
                    class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
                <i class="fas fa-check mr-2"></i>Mark Complete
            </button>
            <button onclick="cancelInvestment({{ investment.id }}); closeModal('investmentDetailModal');" 
                    class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors">
                <i class="fas fa-times mr-2"></i>Cancel Investment
            </button>
        {% endif %}
        <button onclick="editInvestment({{ investment.id }}); closeModal('investmentDetailModal');" 
                class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
            <i class="fas fa-edit mr-2"></i>Edit
        </button>
        <button onclick="closeModal('investmentDetailModal')" 
                class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
            Close
        </button>
    </div>
</div>

investment_analytics

{% extends 'admin_panel/base.html' %}
{% load static %}

{% block title %}Investment Analytics - Admin Panel{% endblock %}

{% block extra_css %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
{% endblock %}

{% block content %}
<div class="container-fluid px-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">Investment Analytics</h1>
            <p class="text-muted">Detailed analytics and insights on investments</p>
        </div>
        <div class="d-flex gap-2">
            <select class="form-select" id="timeRange">
                <option value="7">Last 7 days</option>
                <option value="30" selected>Last 30 days</option>
                <option value="90">Last 90 days</option>
                <option value="365">Last year</option>
            </select>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Investment Trends</h6>
                </div>
                <div class="card-body">
                    <canvas id="investmentTrendsChart"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Investment Status Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="statusDistributionChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Plan Performance -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Plan Performance</h6>
                </div>
                <div class="card-body">
                    <canvas id="planPerformanceChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Investors -->
    <div class="row">
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Top Investors</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Total Invested</th>
                                    <th>Active Investments</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for investor in top_investors %}
                                <tr>
                                    <td>{{ investor.user__full_name|default:investor.user__username }}</td>
                                    <td>${{ investor.total_invested|floatformat:2 }}</td>
                                    <td>{{ investor.active_count }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Activity</h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        {% for activity in recent_activities %}
                        <div class="timeline-item">
                            <div class="timeline-marker bg-primary"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">{{ activity.title }}</h6>
                                <p class="timeline-text">{{ activity.description }}</p>
                                <small class="text-muted">{{ activity.created_at|timesince }} ago</small>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// Investment Trends Chart
const trendsCtx = document.getElementById('investmentTrendsChart').getContext('2d');
const investmentTrendsChart = new Chart(trendsCtx, {
    type: 'line',
    data: {
        labels: {{ chart_labels|safe }},
        datasets: [{
            label: 'New Investments',
            data: {{ new_investments_data|safe }},
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.1
        }, {
            label: 'Completed Investments',
            data: {{ completed_investments_data|safe }},
            borderColor: 'rgb(54, 162, 235)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            tension: 0.1
        }]
    },
    options: {
        responsive: true,
        scales: {
            y: {
                beginAtZero: true
            }
        }
    }
});

// Status Distribution Chart
const statusCtx = document.getElementById('statusDistributionChart').getContext('2d');
const statusDistributionChart = new Chart(statusCtx, {
    type: 'doughnut',
    data: {
        labels: ['Active', 'Completed', 'Cancelled'],
        datasets: [{
            data: {{ status_distribution|safe }},
            backgroundColor: [
                'rgba(75, 192, 192, 0.8)',
                'rgba(54, 162, 235, 0.8)',
                'rgba(255, 99, 132, 0.8)'
            ]
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false
    }
});

// Plan Performance Chart
const planCtx = document.getElementById('planPerformanceChart').getContext('2d');
const planPerformanceChart = new Chart(planCtx, {
    type: 'bar',
    data: {
        labels: {{ plan_names|safe }},
        datasets: [{
            label: 'Total Amount Invested',
            data: {{ plan_amounts|safe }},
            backgroundColor: 'rgba(54, 162, 235, 0.8)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1
        }]
    },
    options: {
        responsive: true,
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        return '$' + value.toLocaleString();
                    }
                }
            }
        }
    }
});
</script>
{% endblock %}


import logging
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth import get_user_model, authenticate, login
from django.db import transaction
from django.db.models import Sum, Q, Count
from django.utils import timezone
from django.http import JsonResponse, HttpResponse
from django.core.paginator import Paginator, EmptyPage
from django.core.mail import send_mail
from django.conf import settings as django_settings
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import update_session_auth_hash
from django.views.decorators.http import require_http_methods, require_POST
from django.views.decorators.csrf import csrf_exempt
from datetime import datetime, timedelta
import json
import csv
from io import StringIO
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from .decorators import admin_required
from transactions.models import Deposit, Withdrawal, Investment, Transaction, InvestmentPlan
from accounts.models import KYCDocument, UserProfile, CustomUser
from core.models import SiteSettings, Testimonial, Certification
from django.contrib.auth.decorators import login_required, user_passes_test

logger = logging.getLogger(__name__)

User = get_user_model()

def is_admin(user):
    return user.is_authenticated and user.is_staff

def get_or_create_profile(user):
    """Ensure a UserProfile exists for the given user."""
    profile, created = UserProfile.objects.get_or_create(user=user)
    return profile

def admin_login(request):
    if request.user.is_authenticated and request.user.is_staff:
        return redirect('admin_panel:dashboard')
    
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        user = authenticate(request, username=username, password=password)
        if user is not None and user.is_staff:
            login(request, user)
            return redirect('admin_panel:dashboard')
        else:
            messages.error(request, 'Invalid credentials or insufficient permissions.')
    
    return render(request, 'admin_panel/login.html')

@admin_required
def dashboard(request):
    total_users = User.objects.count()
    pending_deposits = Deposit.objects.filter(status='pending').count()
    pending_withdrawals = Withdrawal.objects.filter(status='pending').count()
    pending_kyc = KYCDocument.objects.filter(status='pending').count()
    
    total_deposits = Deposit.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0
    active_investments = Investment.objects.filter(status='active').aggregate(Sum('amount'))['amount__sum'] or 0
    
    recent_deposits = Deposit.objects.filter(status='pending').order_by('-created_at')[:5]
    recent_withdrawals = Withdrawal.objects.filter(status='pending').order_by('-created_at')[:5]
    
    context = {
        'total_users': total_users,
        'pending_deposits': pending_deposits,
        'pending_withdrawals': pending_withdrawals,
        'pending_kyc': pending_kyc,
        'total_deposits': total_deposits,
        'active_investments': active_investments,
        'recent_deposits': recent_deposits,
        'recent_withdrawals': recent_withdrawals,
    }
    
    return render(request, 'admin_panel/dashboard.html', context)

@admin_required
def manage_users(request):
    status_filter = request.GET.get('status')
    search_query = request.GET.get('search')
    date_filter = request.GET.get('date')
    
    users = User.objects.select_related('profile').filter(is_staff=False)
    
    if status_filter == 'pending':
        users = users.filter(
            Q(kyc_documents__status='pending') | 
            Q(kyc_documents__isnull=True)
        ).distinct()
    elif status_filter == 'verified':
        users = users.filter(kyc_documents__status='approved').distinct()
    elif status_filter == 'approved':
        users = users.filter(is_approved=True)
    
    if search_query:
        users = users.filter(
            Q(username__icontains=search_query) |
            Q(email__icontains=search_query) |
            Q(full_name__icontains=search_query)
        )
    
    if date_filter:
        users = users.filter(date_joined__date=date_filter)
    
    users = users.order_by('-date_joined')
    
    paginator = Paginator(users, 25)
    page_number = request.GET.get('page')
    try:
        users = paginator.get_page(page_number)
    except EmptyPage:
        users = paginator.get_page(1)
    
    context = {
        'users': users,
        'status_filter': status_filter,
        'search_query': search_query,
        'date_filter': date_filter,
    }
    return render(request, 'admin_panel/users.html', context)

@admin_required
def get_user_details(request, user_id):
    try:
        user = get_object_or_404(User, id=user_id)
        profile = get_or_create_profile(user)
        transactions = Transaction.objects.filter(user=user).order_by('-created_at')[:10]
        
        user_data = {
            'id': user.id,
            'username': user.username,
            'full_name': user.full_name,
            'email': user.email,
            'profile': {
                'country': profile.country,
                'account_balance': float(profile.account_balance),
            }
        }
        
        transactions_data = [{
            'transaction_type': t.transaction_type,
            'amount': float(t.amount),
            'created_at': t.created_at.isoformat(),
            'description': t.description
        } for t in transactions]
        
        return JsonResponse({
            'status': 'success',
            'user': user_data,
            'transactions': transactions_data
        })
    except Exception as e:
        logger.error(f'Error fetching user details for user {user_id}: {str(e)}')
        return JsonResponse({
            'status': 'error',
            'message': 'An error occurred while fetching user details.'
        }, status=400)

@admin_required
def edit_user(request, user_id):
    user = get_object_or_404(User, id=user_id)
    if request.method == 'POST':
        try:
            user.full_name = request.POST.get('full_name')
            user.email = request.POST.get('email')
            profile = get_or_create_profile(user)
            profile.country = request.POST.get('country')
            user.save()
            profile.save()
            messages.success(request, f'User {user.username} updated successfully.')
            return JsonResponse({'status': 'success'})
        except Exception as e:
            logger.error(f'Error editing user {user_id}: {str(e)}')
            return JsonResponse({'status': 'error', 'message': 'An error occurred while updating the user.'}, status=400)
    
    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)

@admin_required
def edit_balance(request, user_id):
    user = get_object_or_404(User, id=user_id)
    if request.method == 'POST':
        try:
            with transaction.atomic():
                new_balance = float(request.POST.get('account_balance'))
                adjustment_note = request.POST.get('adjustment_note')
                profile = get_or_create_profile(user)
                old_balance = profile.account_balance
                
                profile.account_balance = new_balance
                profile.save()
                
                Transaction.objects.create(
                    user=user,
                    transaction_type='bonus' if new_balance > old_balance else 'withdrawal',
                    amount=abs(new_balance - old_balance),
                    description=f'Admin balance adjustment: {adjustment_note}',
                    reference_id=f'admin_adjust_{user.id}'
                )
                
                messages.success(request, f'Balance for {user.username} updated successfully.')
                return JsonResponse({'status': 'success'})
        except ValueError as e:
            logger.error(f'ValueError editing balance for user {user_id}: {str(e)}')
            return JsonResponse({'status': 'error', 'message': 'Invalid balance value.'}, status=400)
        except Exception as e:
            logger.error(f'Error editing balance for user {user_id}: {str(e)}')
            return JsonResponse({'status': 'error', 'message': 'An error occurred while updating the balance.'}, status=400)
    
    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)

@admin_required
def send_message(request, user_id):
    user = get_object_or_404(User, id=user_id)
    if request.method == 'POST':
        subject = request.POST.get('subject')
        message = request.POST.get('message')
        
        if not subject or not message:
            return JsonResponse({'status': 'error', 'message': 'Subject and message are required'}, status=400)
        
        try:
            send_mail(
                subject,
                message,
                django_settings.DEFAULT_FROM_EMAIL,
                [user.email],
                fail_silently=False,
            )
            messages.success(request, f'Message sent to {user.username} successfully.')
            return JsonResponse({'status': 'success'})
        except Exception as e:
            logger.error(f'Error sending message to user {user_id}: {str(e)}')
            messages.error(request, f'Failed to send message: {str(e)}')
            return JsonResponse({'status': 'error', 'message': 'Failed to send message.'}, status=400)
    
    return JsonResponse({'status': 'error', 'message': 'Invalid request'}, status=400)

@admin_required
def view_transactions(request, user_id):
    user = get_object_or_404(User, id=user_id)
    transactions = Transaction.objects.filter(user=user).order_by('-created_at')
    
    context = {
        'user': user,
        'transactions': transactions,
    }
    return render(request, 'admin_panel/user_transactions.html', context)

@admin_required
def login_as_user(request, user_id):
    if not request.user.is_staff:
        messages.error(request, 'Permission denied.')
        return redirect('admin_panel:dashboard')
    
    request.session['admin_user_id'] = request.user.id
    request.session.modified = True
    
    user = get_object_or_404(User, id=user_id)
    login(request, user, backend='django.contrib.auth.backends.ModelBackend')
    messages.info(request, f'Logged in as {user.username}. You can switch back to admin from the dashboard.')
    return redirect('core:dashboard')

@admin_required
def switch_back_admin(request):
    admin_user_id = request.session.get('admin_user_id')
    
    if not admin_user_id:
        messages.error(request, 'No admin session found.')
        return redirect('core:dashboard')
    
    try:
        admin_user = get_object_or_404(User, id=admin_user_id)
        if not admin_user.is_staff:
            messages.error(request, 'Invalid admin account.')
            return redirect('core:dashboard')
        
        login(request, admin_user, backend='django.contrib.auth.backends.ModelBackend')
        del request.session['admin_user_id']
        request.session.modified = True
        messages.success(request, f'Switched back to admin account: {admin_user.username}.')
        return redirect('admin_panel:dashboard')
    except Exception as e:
        logger.error(f'Error switching back to admin: {str(e)}')
        messages.error(request, 'An error occurred while switching back to admin.')
        return redirect('core:dashboard')

@admin_required
def suspend_user(request, user_id):
    user = get_object_or_404(User, id=user_id)
    if request.method == 'POST':
        user.is_active = False
        user.save()
        messages.success(request, f'User {user.username} suspended successfully.')
        return redirect('admin_panel:manage_users')
    
    return render(request, 'admin_panel/suspend_user.html', {'user': user})

@admin_required
def approve_kyc(request, user_id):
    if request.method == 'POST':
        user = get_object_or_404(User, id=user_id)
        try:
            kyc_doc = KYCDocument.objects.filter(user=user).first()
            if kyc_doc:
                kyc_doc.status = 'approved'
                kyc_doc.save()
            
            user.is_verified = True
            user.save()
            
            messages.success(request, f'KYC approved for {user.username}')
        except Exception as e:
            logger.error(f'Error approving KYC for user {user_id}: {str(e)}')
            messages.error(request, f'Error approving KYC: {str(e)}')
    
    return redirect('admin_panel:manage_users')

@admin_required
def reject_kyc(request, user_id):
    if request.method == 'POST':
        user = get_object_or_404(User, id=user_id)
        try:
            kyc_doc = KYCDocument.objects.filter(user=user).first()
            if kyc_doc:
                kyc_doc.status = 'rejected'
                kyc_doc.save()
            
            messages.success(request, f'KYC rejected for {user.username}')
        except Exception as e:
            logger.error(f'Error rejecting KYC for user {user_id}: {str(e)}')
            messages.error(request, f'Error rejecting KYC: {str(e)}')
    
    return redirect('admin_panel:manage_users')

@admin_required
def manage_deposits(request):
    status_filter = request.GET.get('status')
    deposits = Deposit.objects.select_related('user').all()
    
    if status_filter:
        deposits = deposits.filter(status=status_filter)
    
    deposits = deposits.order_by('-created_at')
    
    context = {
        'deposits': deposits,
        'status_filter': status_filter,
    }
    return render(request, 'admin_panel/deposits.html', context)

@admin_required
def approve_deposit(request, deposit_id):
    deposit = get_object_or_404(Deposit, id=deposit_id)
    
    if deposit.status == 'pending':
        with transaction.atomic():
            deposit.status = 'approved'
            deposit.approved_at = timezone.now()
            deposit.save()
            
            profile = get_or_create_profile(deposit.user)
            profile.account_balance += deposit.amount
            profile.total_deposit += deposit.amount
            profile.save()
            
            Transaction.objects.create(
                user=deposit.user,
                transaction_type='deposit',
                amount=deposit.amount,
                description=f'Deposit approved - {deposit.payment_method}',
                reference_id=str(deposit.id)
            )
            
            messages.success(request, f'Deposit of ${deposit.amount} approved for {deposit.user.username}.')
    
    return redirect('admin_panel:manage_deposits')

@admin_required
def reject_deposit(request, deposit_id):
    deposit = get_object_or_404(Deposit, id=deposit_id)
    
    if deposit.status == 'pending':
        deposit.status = 'rejected'
        deposit.save()
        messages.warning(request, f'Deposit of ${deposit.amount} rejected for {deposit.user.username}.')
    
    return redirect('admin_panel:manage_deposits')

@admin_required
def manage_withdrawals(request):
    status_filter = request.GET.get('status')
    withdrawals = Withdrawal.objects.select_related('user').all()
    
    if status_filter:
        withdrawals = withdrawals.filter(status=status_filter)
    
    withdrawals = withdrawals.order_by('-created_at')
    
    context = {
        'withdrawals': withdrawals,
        'status_filter': status_filter,
    }
    return render(request, 'admin_panel/withdrawals.html', context)

@admin_required
def approve_withdrawal(request, withdrawal_id):
    withdrawal = get_object_or_404(Withdrawal, id=withdrawal_id)
    
    if withdrawal.status == 'pending':
        with transaction.atomic():
            withdrawal.status = 'approved'
            withdrawal.processed_at = timezone.now()
            withdrawal.save()
            
            profile = get_or_create_profile(withdrawal.user)
            profile.account_balance -= withdrawal.amount
            profile.pending_withdrawal -= withdrawal.amount
            profile.total_withdrawal += withdrawal.amount
            profile.save()
            
            messages.success(request, f'Withdrawal of ${withdrawal.amount} approved for {withdrawal.user.username}.')
    
    return redirect('admin_panel:manage_withdrawals')

@login_required
@user_passes_test(is_admin)
def manage_investments(request):
    """Display all investments with filtering and pagination."""
    investments = Investment.objects.select_related('user', 'plan').all()
    
    status_filter = request.GET.get('status')
    plan_filter = request.GET.get('plan')
    search_query = request.GET.get('search')
    export_format = request.GET.get('export')
    
    if status_filter:
        investments = investments.filter(status=status_filter)
    
    if plan_filter:
        investments = investments.filter(plan_id=plan_filter)
    
    if search_query:
        investments = investments.filter(
            Q(user__username__icontains=search_query) |
            Q(user__email__icontains=search_query) |
            Q(user__full_name__icontains=search_query)
        )
    
    if export_format in ['csv', 'excel']:
        return export_investments(investments, export_format)
    
    investments = investments.order_by('-start_date')
    
    stats = {
        'total_investment_amount': investments.aggregate(total=Sum('amount'))['total'] or 0,
        'active_investments_count': investments.filter(status='active').count(),
        'completed_investments_count': investments.filter(status='completed').count(),
        'total_expected_returns': investments.aggregate(total=Sum('expected_return'))['total'] or 0,
    }
    
    paginator = Paginator(investments, 25)
    page_number = request.GET.get('page')
    try:
        investments_page = paginator.get_page(page_number)
    except EmptyPage:
        investments_page = paginator.get_page(1)
    
    for investment in investments_page:
        now = timezone.now()
        total_days = investment.plan.duration_days
        
        days_passed = 0
        if investment.start_date:
            start_date = getattr(investment.start_date, 'date', investment.start_date)()
            days_passed = (now.date() - start_date).days
        
        days_remaining = max(0, total_days - days_passed)
        progress_percentage = min(100, (days_passed / total_days) * 100) if total_days > 0 else 0
        
        investment.days_passed = max(0, days_passed)
        investment.days_remaining = days_remaining
        investment.progress_percentage = progress_percentage
    
    investment_plans = InvestmentPlan.objects.filter(is_active=True)
    users = CustomUser.objects.filter(is_active=True, is_staff=False).order_by('username')
    
    context = {
        'investments': investments_page,
        'investment_plans': investment_plans,
        'users': users,
        'no_plans': not investment_plans.exists(),
        'no_users': not users.exists(),
        **stats,
    }
    
    if not investment_plans.exists() or not users.exists():
        messages.warning(request, 'No active users or investment plans available. Please create some first.')
    
    return render(request, 'admin_panel/investments.html', context)

@admin_required
def manage_investment_plans(request):
    plans = InvestmentPlan.objects.all().order_by('minimum_amount')
    
    for plan in plans:
        plan.total_investments = Investment.objects.filter(plan=plan).count()
        plan.total_invested = Investment.objects.filter(plan=plan).aggregate(Sum('amount'))['amount__sum'] or 0
    
    active_plans = plans.filter(is_active=True).count()
    total_invested = Investment.objects.aggregate(Sum('amount'))['amount__sum'] or 0
    active_investors = Investment.objects.filter(status='active').values('user').distinct().count()
    
    if request.method == 'POST':
        try:
            plan_id = request.POST.get('plan_id')
            if plan_id:
                plan = get_object_or_404(InvestmentPlan, id=plan_id)
            else:
                plan = InvestmentPlan()
            
            plan.name = request.POST.get('name')
            plan.minimum_amount = float(request.POST.get('minimum_amount'))
            plan.maximum_amount = float(request.POST.get('maximum_amount'))
            plan.roi_percentage = float(request.POST.get('roi_percentage'))
            plan.duration_days = int(request.POST.get('duration_days'))
            plan.description = request.POST.get('description')
            plan.is_active = request.POST.get('is_active') == 'true'
            plan.save()
            
            messages.success(request, f'Investment plan "{plan.name}" saved successfully!')
            return redirect('admin_panel:manage_investment_plans')
        except ValueError as e:
            logger.error(f'Error saving investment plan: {str(e)}')
            messages.error(request, f'Invalid input: {str(e)}')
        except Exception as e:
            logger.error(f'Unexpected error saving investment plan: {str(e)}')
            messages.error(request, 'An error occurred while saving the plan.')
    
    context = {
        'plans': plans,
        'active_plans': active_plans,
        'total_invested': total_invested,
        'active_investors': active_investors,
    }
    return render(request, 'admin_panel/investment_plans.html', context)

@admin_required
def settings(request):
    site_settings, created = SiteSettings.objects.get_or_create(id=1)
    
    if request.method == 'POST':
        try:
            site_settings.site_name = request.POST.get('site_name', site_settings.site_name)
            site_settings.contact_email = request.POST.get('site_email', site_settings.contact_email)
            site_settings.btc_wallet = request.POST.get('bitcoin_wallet', site_settings.btc_wallet)
            site_settings.eth_wallet = request.POST.get('ethereum_wallet', site_settings.eth_wallet)
            site_settings.usdt_wallet = request.POST.get('usdt_wallet', site_settings.usdt_wallet)
            
            minimum_deposit = request.POST.get('minimum_deposit')
            if minimum_deposit:
                site_settings.minimum_deposit = float(minimum_deposit)
            
            minimum_withdrawal = request.POST.get('minimum_withdrawal')
            if minimum_withdrawal:
                site_settings.minimum_withdrawal = float(minimum_withdrawal)
            
            site_settings.save()
            messages.success(request, 'Settings updated successfully!')
        except ValueError as e:
            logger.error(f'Error updating settings: {str(e)}')
            messages.error(request, f'Invalid input: {str(e)}')
        except Exception as e:
            logger.error(f'Unexpected error updating settings: {str(e)}')
            messages.error(request, 'An error occurred while updating settings.')
        return redirect('admin_panel:settings')
    
    context = {
        'site_settings': site_settings,
    }
    return render(request, 'admin_panel/settings.html', context)

@admin_required
def reports(request):
    total_users = User.objects.count()
    verified_users = KYCDocument.objects.filter(status='approved').count()
    total_deposits = Deposit.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0
    total_withdrawals = Withdrawal.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0
    active_investments = Investment.objects.filter(status='active').aggregate(Sum('amount'))['amount__sum'] or 0
    
    recent_users = User.objects.order_by('-date_joined')[:10]
    recent_deposits = Deposit.objects.order_by('-created_at')[:10]
    recent_withdrawals = Withdrawal.objects.order_by('-created_at')[:10]
    
    context = {
        'total_users': total_users,
        'verified_users': verified_users,
        'total_deposits': total_deposits,
        'total_withdrawals': total_withdrawals,
        'active_investments': active_investments,
        'recent_users': recent_users,
        'recent_deposits': recent_deposits,
        'recent_withdrawals': recent_withdrawals,
    }
    return render(request, 'admin_panel/reports.html', context)

@admin_required
def toggle_plan_status(request, plan_id):
    plan = get_object_or_404(InvestmentPlan, id=plan_id)
    plan.is_active = not plan.is_active
    plan.save()
    
    status_text = 'activated' if plan.is_active else 'deactivated'
    messages.success(request, f'Investment plan "{plan.name}" has been {status_text}.')
    
    return redirect('admin_panel:manage_investment_plans')

@admin_required
def delete_plan(request, plan_id):
    plan = get_object_or_404(InvestmentPlan, id=plan_id)
    
    active_investments = Investment.objects.filter(plan=plan, status='active').count()
    
    if active_investments > 0:
        messages.error(request, f'Cannot delete plan "{plan.name}" because it has {active_investments} active investments.')
    else:
        plan_name = plan.name
        plan.delete()
        messages.success(request, f'Investment plan "{plan_name}" deleted successfully.')
    
    return redirect('admin_panel:manage_investment_plans')

@admin_required
def complete_investment(request, investment_id):
    try:
        investment = get_object_or_404(Investment, id=investment_id)
        
        if investment.status != 'active':
            messages.warning(request, 'Investment is not active.')
            return redirect('admin_panel:manage_investments')
        
        with transaction.atomic():
            investment.status = 'completed'
            investment.completed_at = timezone.now()
            investment.save()
            
            profile = get_or_create_profile(investment.user)
            roi_amount = investment.expected_return - investment.amount
            profile.account_balance += investment.expected_return
            profile.current_investment -= investment.amount
            profile.save()
            
            Transaction.objects.create(
                user=investment.user,
                transaction_type='roi',
                amount=roi_amount,
                description=f'ROI from {investment.plan.name}',
                reference_id=str(investment.id)
            )
            
            Transaction.objects.create(
                user=investment.user,
                transaction_type='investment',
                amount=investment.amount,
                description=f'Investment return - {investment.plan.name}',
                reference_id=str(investment.id)
            )
            
            messages.success(request, f'Investment completed for {investment.user.username}. ROI of ${roi_amount} added.')
    except Exception as e:
        logger.error(f'Error completing investment {investment_id}: {str(e)}')
        messages.error(request, 'An error occurred while completing the investment.')
    
    return redirect('admin_panel:manage_investments')

@admin_required
def manage_testimonials(request):
    testimonials = Testimonial.objects.all().order_by('-created_at')
    
    if request.method == 'POST':
        try:
            testimonial_id = request.POST.get('testimonial_id')
            if testimonial_id:
                testimonial = get_object_or_404(Testimonial, id=testimonial_id)
            else:
                testimonial = Testimonial()
            
            testimonial.name = request.POST.get('name')
            testimonial.position = request.POST.get('position', '')
            testimonial.content = request.POST.get('content')
            testimonial.rating = int(request.POST.get('rating', 5))
            testimonial.is_active = request.POST.get('is_active') == 'on'
            
            if 'avatar' in request.FILES:
                testimonial.avatar = request.FILES['avatar']
            
            testimonial.save()
            messages.success(request, f'Testimonial for "{testimonial.name}" saved successfully!')
        except ValueError as e:
            logger.error(f'Error saving testimonial: {str(e)}')
            messages.error(request, f'Invalid input: {str(e)}')
        except Exception as e:
            logger.error(f'Unexpected error saving testimonial: {str(e)}')
            messages.error(request, 'An error occurred while saving the testimonial.')
        
        return redirect('admin_panel:manage_testimonials')
    
    context = {
        'testimonials': testimonials,
    }
    return render(request, 'admin_panel/testimonials.html', context)

@admin_required
def delete_testimonial(request, testimonial_id):
    testimonial = get_object_or_404(Testimonial, id=testimonial_id)
    testimonial_name = testimonial.name
    testimonial.delete()
    messages.success(request, f'Testimonial for "{testimonial_name}" deleted successfully!')
    return redirect('admin_panel:manage_testimonials')

@admin_required
def toggle_testimonial_status(request, testimonial_id):
    testimonial = get_object_or_404(Testimonial, id=testimonial_id)
    testimonial.is_active = not testimonial.is_active
    testimonial.save()
    status_text = 'activated' if testimonial.is_active else 'deactivated'
    messages.success(request, f'Testimonial for "{testimonial.name}" {status_text}.')
    return redirect('admin_panel:manage_testimonials')

@admin_required
def manage_certifications(request):
    certifications = Certification.objects.all().order_by('-created_at')
    
    if request.method == 'POST':
        try:
            certification_id = request.POST.get('certification_id')
            if certification_id:
                certification = get_object_or_404(Certification, id=certification_id)
            else:
                certification = Certification()
            
            certification.name = request.POST.get('name')
            certification.description = request.POST.get('description', '')
            certification.is_active = request.POST.get('is_active') == 'on'
            
            if 'image' in request.FILES:
                certification.image = request.FILES['image']
            
            certification.save()
            messages.success(request, f'Certification "{certification.name}" saved successfully!')
        except ValueError as e:
            logger.error(f'Error saving certification: {str(e)}')
            messages.error(request, f'Invalid input: {str(e)}')
        except Exception as e:
            logger.error(f'Unexpected error saving certification: {str(e)}')
            messages.error(request, 'An error occurred while saving the certification.')
        
        return redirect('admin_panel:manage_certifications')
    
    context = {
        'certifications': certifications,
    }
    return render(request, 'admin_panel/certifications.html', context)

@admin_required
def delete_certification(request, certification_id):
    certification = get_object_or_404(Certification, id=certification_id)
    certification_name = certification.name
    certification.delete()
    messages.success(request, f'Certification "{certification_name}" deleted successfully!')
    return redirect('admin_panel:manage_certifications')

@admin_required
def toggle_certification_status(request, certification_id):
    certification = get_object_or_404(Certification, id=certification_id)
    certification.is_active = not certification.is_active
    certification.save()
    status_text = 'activated' if certification.is_active else 'deactivated'
    messages.success(request, f'Certification "{certification.name}" {status_text}.')
    return redirect('admin_panel:manage_certifications')

@admin_required
def admin_profile(request):
    profile = get_or_create_profile(request.user)
    
    context = {
        'profile': profile,
    }
    return render(request, 'admin_panel/profile.html', context)

@admin_required
@require_http_methods(["POST"])
def update_profile(request):
    try:
        request.user.full_name = request.POST.get('full_name', '')
        request.user.email = request.POST.get('email', '')
        request.user.save()
        
        profile = get_or_create_profile(request.user)
        profile.phone_number = request.POST.get('phone_number', '')
        profile.country = request.POST.get('country', '')
        profile.state = request.POST.get('state', '')
        profile.address = request.POST.get('address', '')
        profile.save()
        
        messages.success(request, 'Profile updated successfully!')
    except Exception as e:
        logger.error(f'Error updating admin profile: {str(e)}')
        messages.error(request, f'Error updating profile: {str(e)}')
    
    return redirect('admin_panel:admin_profile')

@admin_required
@require_http_methods(["POST"])
def admin_change_password(request):
    form = PasswordChangeForm(request.user, request.POST)
    
    if form.is_valid():
        user = form.save()
        update_session_auth_hash(request, user)
        messages.success(request, 'Your password was successfully updated!')
    else:
        for field, errors in form.errors.items():
            for error in errors:
                messages.error(request, f'{field}: {error}')
    
    return redirect('admin_panel:admin_profile')

@login_required
@user_passes_test(is_admin)
def investment_detail(request, investment_id):
    """Get investment details for modal display."""
    try:
        investment = get_object_or_404(Investment, id=investment_id)
        
        now = timezone.now()
        total_days = investment.plan.duration_days
        
        days_passed = 0
        if investment.start_date:
            start_date = getattr(investment.start_date, 'date', investment.start_date)()
            days_passed = (now.date() - start_date).days
        
        days_remaining = max(0, total_days - days_passed)
        progress_percentage = min(100, (days_passed / total_days) * 100) if total_days > 0 else 0
        
        investment.days_passed = max(0, days_passed)
        investment.days_remaining = days_remaining
        investment.progress_percentage = progress_percentage
        investment.profit = investment.expected_return - investment.amount
        
        return render(request, 'admin_panel/investment_detail.html', {
            'investment': investment
        })
    except Exception as e:
        logger.error(f'Error fetching investment details {investment_id}: {str(e)}')
        return HttpResponse('Error loading investment details.', status=500)

@login_required
@user_passes_test(is_admin)
def add_investment(request):
    """Add new investment."""
    if request.method != 'POST':
        return redirect('admin_panel:manage_investments')
    
    try:
        with transaction.atomic():
            user_id = request.POST.get('user')
            plan_id = request.POST.get('plan')
            amount = float(request.POST.get('amount'))
            start_date = request.POST.get('start_date')
            
            user = get_object_or_404(CustomUser, id=user_id)
            plan = get_object_or_404(InvestmentPlan, id=plan_id)
            
            if amount < plan.minimum_amount or amount > plan.maximum_amount:
                messages.error(request, f'Amount must be between ${plan.minimum_amount} and ${plan.maximum_amount}')
                return redirect('admin_panel:manage_investments')
            
            if start_date:
                try:
                    start_date = datetime.strptime(start_date, '%Y-%m-%d')
                except ValueError:
                    messages.error(request, 'Invalid start date format. Use YYYY-MM-DD.')
                    return redirect('admin_panel:manage_investments')
            else:
                start_date = timezone.now()
            
            end_date = start_date + timedelta(days=plan.duration_days)
            
            expected_return = amount + (amount * plan.roi_percentage / 100)
            
            investment = Investment.objects.create(
                user=user,
                plan=plan,
                amount=amount,
                expected_return=expected_return,
                start_date=start_date,
                end_date=end_date,
                status='active'
            )
            
            Transaction.objects.create(
                user=user,
                transaction_type='investment',
                amount=-amount,
                description=f'Investment in {plan.name}',
                reference_id=str(investment.id)
            )
            
            profile = get_or_create_profile(user)
            profile.current_investment += amount
            profile.account_balance -= amount
            profile.save()
            
            messages.success(request, f'Investment created successfully for {user.username}')
    
    except ValueError as e:
        logger.error(f'ValueError creating investment: {str(e)}')
        messages.error(request, f'Invalid input: {str(e)}')
    except Exception as e:
        logger.error(f'Unexpected error creating investment: {str(e)}')
        messages.error(request, 'An error occurred while creating the investment.')
    
    return redirect('admin_panel:manage_investments')

@login_required
@user_passes_test(is_admin)
def edit_investment_form(request, investment_id):
    """Get edit investment form for modal display."""
    try:
        investment = get_object_or_404(Investment, id=investment_id)
        investment_plans = InvestmentPlan.objects.filter(is_active=True)
        
        context = {
            'investment': investment,
            'investment_plans': investment_plans,
            'no_plans': not investment_plans.exists()
        }
        
        if not investment_plans.exists():
            messages.warning(request, 'No active investment plans available.')
        
        return render(request, 'admin_panel/edit_investment.html', context)
    except Exception as e:
        logger.error(f'Error fetching edit investment form {investment_id}: {str(e)}')
        return HttpResponse('Error loading edit form.', status=500)

@login_required
@user_passes_test(is_admin)
def edit_investment(request, investment_id):
    """Edit existing investment."""
    if request.method != 'POST':
        return redirect('admin_panel:manage_investments')
    
    investment = get_object_or_404(Investment, id=investment_id)
    
    try:
        with transaction.atomic():
            old_amount = investment.amount
            old_status = investment.status
            
            plan_id = request.POST.get('plan')
            amount = float(request.POST.get('amount'))
            expected_return = float(request.POST.get('expected_return'))
            status = request.POST.get('status')
            start_date = request.POST.get('start_date')
            end_date = request.POST.get('end_date')
            completed_at = request.POST.get('completed_at')
            
            plan = get_object_or_404(InvestmentPlan, id=plan_id)
            
            if amount < plan.minimum_amount or amount > plan.maximum_amount:
                messages.error(request, f'Amount must be between ${plan.minimum_amount} and ${plan.maximum_amount}')
                return redirect('admin_panel:manage_investments')
            
            try:
                start_date = datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                end_date = datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                if completed_at and status == 'completed':
                    completed_at = datetime.strptime(completed_at, '%Y-%m-%dT%H:%M')
                else:
                    completed_at = None
            except ValueError:
                messages.error(request, 'Invalid date format. Use YYYY-MM-DDTHH:MM.')
                return redirect('admin_panel:manage_investments')
            
            valid_transitions = {
                'active': ['completed', 'cancelled'],
                'completed': [],
                'cancelled': []
            }
            if old_status != status and status not in valid_transitions[old_status]:
                messages.error(request, f'Invalid status transition from {old_status} to {status}')
                return redirect('admin_panel:manage_investments')
            
            investment.plan = plan
            investment.amount = amount
            investment.expected_return = expected_return
            investment.status = status
            investment.start_date = start_date
            investment.end_date = end_date
            investment.completed_at = completed_at
            investment.save()
            
            profile = get_or_create_profile(investment.user)
            
            if old_amount != amount:
                difference = amount - old_amount
                profile.current_investment += difference
                profile.save()
            
            if old_status != status:
                if status == 'completed' and old_status == 'active':
                    profile.account_balance += investment.expected_return
                    profile.current_investment -= investment.amount
                    profile.save()
                    
                    Transaction.objects.create(
                        user=investment.user,
                        transaction_type='roi',
                        amount=investment.expected_return,
                        description=f'ROI from {investment.plan.name}',
                        reference_id=str(investment.id)
                    )
                elif status == 'cancelled' and old_status == 'active':
                    profile.account_balance += investment.amount
                    profile.current_investment -= investment.amount
                    profile.save()
                    
                    Transaction.objects.create(
                        user=investment.user,
                        transaction_type='refund',
                        amount=investment.amount,
                        description=f'Refund for cancelled investment in {investment.plan.name}',
                        reference_id=str(investment.id)
                    )
            
            messages.success(request, 'Investment updated successfully')
    
    except ValueError as e:
        logger.error(f'ValueError updating investment {investment_id}: {str(e)}')
        messages.error(request, f'Invalid input: {str(e)}')
    except Exception as e:
        logger.error(f'Unexpected error updating investment {investment_id}: {str(e)}')
        messages.error(request, 'An error occurred while updating the investment.')
    
    return redirect('admin_panel:manage_investments')

@login_required
@user_passes_test(is_admin)
@require_POST
def cancel_investment(request, investment_id):
    """Cancel investment."""
    try:
        with transaction.atomic():
            investment = get_object_or_404(Investment, id=investment_id)
            
            if investment.status != 'active':
                return JsonResponse({'success': False, 'error': 'Investment is not active'}, status=400)
            
            investment.status = 'cancelled'
            investment.save()
            
            profile = get_or_create_profile(investment.user)
            profile.account_balance += investment.amount
            profile.current_investment -= investment.amount
            profile.save()
            
            Transaction.objects.create(
                user=investment.user,
                transaction_type='refund',
                amount=investment.amount,
                description=f'Refund for cancelled investment in {investment.plan.name}',
                reference_id=str(investment.id)
            )
            
            return JsonResponse({'success': True})
    
    except Exception as e:
        logger.error(f'Error cancelling investment {investment_id}: {str(e)}')
        return JsonResponse({'success': False, 'error': 'An error occurred while cancelling the investment.'}, status=500)

@login_required
@user_passes_test(is_admin)
def investment_analytics(request):
    days = int(request.GET.get('days', 30))
    start_date = timezone.now() - timedelta(days=days)
    
    investments = Investment.objects.filter(start_date__gte=start_date)
    
    chart_data = []
    new_investments_data = []
    completed_investments_data = []
    chart_labels = []
    
    for i in range(days):
        date = start_date + timedelta(days=i)
        date_str = date.strftime('%Y-%m-%d')
        chart_labels.append(date.strftime('%m/%d'))
        
        new_count = investments.filter(start_date__date=date.date()).count()
        completed_count = investments.filter(completed_at__date=date.date()).count()
        
        new_investments_data.append(new_count)
        completed_investments_data.append(completed_count)
    
    status_distribution = [
        Investment.objects.filter(status='active').count(),
        Investment.objects.filter(status='completed').count(),
        Investment.objects.filter(status='cancelled').count(),
    ]
    
    plan_performance = InvestmentPlan.objects.annotate(
        total_invested=Sum('investment__amount'),
        investment_count=Count('investment')
    ).filter(total_invested__isnull=False)
    
    plan_names = [plan.name for plan in plan_performance]
    plan_amounts = [float(plan.total_invested or 0) for plan in plan_performance]
    
    top_investors = CustomUser.objects.annotate(
        total_invested=Sum('investments__amount'),
        active_count=Count('investments', filter=Q(investments__status='active'))
    ).filter(total_invested__isnull=False).order_by('-total_invested')[:10]
    
    recent_investments = Investment.objects.select_related('user', 'plan').order_by('-start_date')[:10]
    recent_activities = []
    
    for inv in recent_investments:
        if inv.status == 'completed':
            recent_activities.append({
                'title': 'Investment Completed',
                'description': f'{inv.user.username} completed investment in {inv.plan.name}',
                'created_at': inv.completed_at or inv.start_date
            })
        else:
            recent_activities.append({
                'title': 'New Investment',
                'description': f'{inv.user.username} invested ${inv.amount} in {inv.plan.name}',
                'created_at': inv.start_date
            })
    
    context = {
        'chart_labels': json.dumps(chart_labels),
        'new_investments_data': json.dumps(new_investments_data),
        'completed_investments_data': json.dumps(completed_investments_data),
        'status_distribution': json.dumps(status_distribution),
        'plan_names': json.dumps(plan_names),
        'plan_amounts': json.dumps(plan_amounts),
        'top_investors': top_investors,
        'recent_activities': recent_activities,
    }
    
    return render(request, 'admin_panel/investment_analytics.html', context)

def export_investments(investments, format_type):
    """Export investments to CSV or Excel."""
    try:
        if format_type == 'csv':
            response = HttpResponse(content_type='text/csv')
            response['Content-Disposition'] = 'attachment; filename="investments.csv"'
            
            writer = csv.writer(response)
            writer.writerow([
                'ID', 'User', 'Email', 'Plan', 'Amount', 'Expected Return',
                'Status', 'Start Date', 'End Date', 'Completed At'
            ])
            
            for investment in investments:
                writer.writerow([
                    investment.id,
                    investment.user.full_name or investment.user.username,
                    investment.user.email,
                    investment.plan.name,
                    investment.amount,
                    investment.expected_return,
                    investment.status,
                    investment.start_date,
                    investment.end_date,
                    investment.completed_at or ''
                ])
            
            return response
        
        elif format_type == 'excel':
            response = HttpResponse(
                content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            response['Content-Disposition'] = 'attachment; filename="investments.xlsx"'
            
            workbook = Workbook()
            worksheet = workbook.active
            worksheet.title = 'Investments'
            
            headers = [
                'ID', 'User', 'Email', 'Plan', 'Amount', 'Expected Return',
                'Status', 'Start Date', 'End Date', 'Completed At'
            ]
            
            for col_num, header in enumerate(headers, 1):
                col_letter = get_column_letter(col_num)
                worksheet[f'{col_letter}1'] = header
            
            for row_num, investment in enumerate(investments, 2):
                worksheet[f'A{row_num}'] = investment.id
                worksheet[f'B{row_num}'] = investment.user.full_name or investment.user.username
                worksheet[f'C{row_num}'] = investment.user.email
                worksheet[f'D{row_num}'] = investment.plan.name
                worksheet[f'E{row_num}'] = float(investment.amount)
                worksheet[f'F{row_num}'] = float(investment.expected_return)
                worksheet[f'G{row_num}'] = investment.status
                worksheet[f'H{row_num}'] = investment.start_date
                worksheet[f'I{row_num}'] = investment.end_date
                worksheet[f'J{row_num}'] = investment.completed_at or ''
            
            workbook.save(response)
            return response
    except Exception as e:
        logger.error(f'Error exporting investments: {str(e)}')
        return HttpResponse('Error exporting investments.', status=500)

the modals are not working, other action buttons like add_investment, edit_investment, view, complete, cancel none is workingplease help me outa
while helping give me updated code

